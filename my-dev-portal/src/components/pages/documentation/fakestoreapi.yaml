openapi: 3.0.4
info:
  title: FakeStoreAPI
  description: A free fake API for testing and prototyping e-commerce applications.
  version: 2.1.8
servers:
  - url: https://fakestoreapi.com
paths:
  /products:
    get:
      summary: Get all products
      description: Retrieve a list of all available products.
      operationId: getAllProducts
      tags:
        - Products
      x-code-samples:
        - lang: javascript
          label: JavaScript (Browser)
          source: |-
            fetch('https://fakestoreapi.com/products')
              .then(response => response.json())
              .then(data => console.log(data));
        - lang: nodejs
          label: Node.js (Axios)
          source: |-
            const axios = require('axios');
            axios.get('https://fakestoreapi.com/products')
              .then(response => console.log(response.data));
        - lang: php
          label: PHP
          source: |-
            <?php
              $response = file_get_contents('https://fakestoreapi.com/products');
              echo $response;
            ?>
        - lang: curl
          label: cURL
          source: curl -X GET 'https://fakestoreapi.com/products'
        - lang: python
          label: Python
          source: |-
            import requests
            response = requests.get('https://fakestoreapi.com/products')
            print(response.json())
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Product'
        '400':
          description: Bad request
    post:
      summary: Add a new product
      description: Create a new product.
      operationId: addProduct
      tags:
        - Products
      x-code-samples:
        - lang: javascript
          label: JavaScript (Browser)
          source: |-
            const product = { title: 'New Product', price: 29.99 };
            fetch('https://fakestoreapi.com/products', {
              method: 'POST',
              headers: { 'Content-Type': 'application/json' },
              body: JSON.stringify(product)
            })
              .then(response => response.json())
              .then(data => console.log(data));
        - lang: nodejs
          label: Node.js (Axios)
          source: |-
            const axios = require('axios');
            const product = { title: 'New Product', price: 29.99 };
            axios.post('https://fakestoreapi.com/products', product)
              .then(response => console.log(response.data));
        - lang: php
          label: PHP
          source: |-
            <?php
              $product = json_encode(['title' => 'New Product', 'price' => 29.99]);
              $ch = curl_init('https://fakestoreapi.com/products');
              curl_setopt($ch, CURLOPT_POST, 1);
              curl_setopt($ch, CURLOPT_POSTFIELDS, $product);
              curl_setopt($ch, CURLOPT_HTTPHEADER, ['Content-Type: application/json']);
              $response = curl_exec($ch);
              curl_close($ch);
              echo $response;
            ?>
        - lang: curl
          label: cURL
          source: >-
            curl -X POST 'https://fakestoreapi.com/products' -H 'Content-Type:
            application/json' -d '{"title": "New Product", "price": 29.99}'
        - lang: python
          label: Python
          source: >-
            import requests

            product = {'title': 'New Product', 'price': 29.99}

            response = requests.post('https://fakestoreapi.com/products',
            json=product)

            print(response.json())
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Product'
      responses:
        '201':
          description: Product created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Product'
        '400':
          description: Bad request
  /products/{id}:
    get:
      summary: Get a single product
      description: Retrieve details of a specific product by ID.
      operationId: getProductById
      tags:
        - Products
      x-code-samples:
        - lang: javascript
          label: JavaScript (Browser)
          source: |-
            fetch('https://fakestoreapi.com/products/1')
              .then(response => response.json())
              .then(data => console.log(data));
        - lang: nodejs
          label: Node.js (Axios)
          source: |-
            const axios = require('axios');
            axios.get('https://fakestoreapi.com/products/1')
              .then(response => console.log(response.data));
        - lang: php
          label: PHP
          source: |-
            <?php
              $response = file_get_contents('https://fakestoreapi.com/products/1');
              echo $response;
            ?>
        - lang: curl
          label: cURL
          source: curl -X GET 'https://fakestoreapi.com/products/1'
        - lang: python
          label: Python
          source: |-
            import requests
            response = requests.get('https://fakestoreapi.com/products/1')
            print(response.json())
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Product'
        '400':
          description: Bad request
    put:
      summary: Update a product
      description: Update an existing product by ID.
      operationId: updateProduct
      tags:
        - Products
      x-code-samples:
        - lang: javascript
          label: JavaScript (Browser)
          source: |-
            const product = { title: 'Updated Product', price: 39.99 };
            fetch('https://fakestoreapi.com/products/1', {
              method: 'PUT',
              headers: { 'Content-Type': 'application/json' },
              body: JSON.stringify(product)
            })
              .then(response => response.json())
              .then(data => console.log(data));
        - lang: nodejs
          label: Node.js (Axios)
          source: |-
            const axios = require('axios');
            const product = { title: 'Updated Product', price: 39.99 };
            axios.put('https://fakestoreapi.com/products/1', product)
              .then(response => console.log(response.data));
        - lang: php
          label: PHP
          source: |-
            <?php
              $product = json_encode(['title' => 'Updated Product', 'price' => 39.99]);
              $ch = curl_init('https://fakestoreapi.com/products/1');
              curl_setopt($ch, CURLOPT_CUSTOMREQUEST, 'PUT');
              curl_setopt($ch, CURLOPT_POSTFIELDS, $product);
              curl_setopt($ch, CURLOPT_HTTPHEADER, ['Content-Type: application/json']);
              $response = curl_exec($ch);
              curl_close($ch);
              echo $response;
            ?>
        - lang: curl
          label: cURL
          source: >-
            curl -X PUT 'https://fakestoreapi.com/products/1' -H 'Content-Type:
            application/json' -d '{"title": "Updated Product", "price": 39.99}'
        - lang: python
          label: Python
          source: >-
            import requests

            product = {'title': 'Updated Product', 'price': 39.99}

            response = requests.put('https://fakestoreapi.com/products/1',
            json=product)

            print(response.json())
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Product'
      responses:
        '200':
          description: Product updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Product'
        '400':
          description: Bad request
    delete:
      summary: Delete a product
      description: Delete a specific product by ID.
      operationId: deleteProduct
      tags:
        - Products
      x-code-samples:
        - lang: javascript
          label: JavaScript (Browser)
          source: |-
            fetch('https://fakestoreapi.com/products/1', {
              method: 'DELETE'
            })
              .then(response => response.json())
              .then(data => console.log(data));
        - lang: nodejs
          label: Node.js (Axios)
          source: |-
            const axios = require('axios');
            axios.delete('https://fakestoreapi.com/products/1')
              .then(response => console.log(response.data));
        - lang: php
          label: PHP
          source: |-
            <?php
              $ch = curl_init('https://fakestoreapi.com/products/1');
              curl_setopt($ch, CURLOPT_CUSTOMREQUEST, 'DELETE');
              $response = curl_exec($ch);
              curl_close($ch);
              echo $response;
            ?>
        - lang: curl
          label: cURL
          source: curl -X DELETE 'https://fakestoreapi.com/products/1'
        - lang: python
          label: Python
          source: |-
            import requests
            response = requests.delete('https://fakestoreapi.com/products/1')
            print(response.json())
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: Product deleted successfully
        '400':
          description: Bad request
  /carts:
    get:
      summary: Get all carts
      description: Retrieve a list of all available carts.
      operationId: getAllCarts
      tags:
        - Carts
      x-code-samples:
        - lang: javascript
          label: JavaScript (Browser)
          source: |-
            fetch('https://fakestoreapi.com/carts')
              .then(response => response.json())
              .then(data => console.log(data));
        - lang: nodejs
          label: Node.js (Axios)
          source: |-
            const axios = require('axios');
            axios.get('https://fakestoreapi.com/carts')
              .then(response => console.log(response.data));
        - lang: php
          label: PHP
          source: |-
            <?php
              $response = file_get_contents('https://fakestoreapi.com/carts');
              echo $response;
            ?>
        - lang: curl
          label: cURL
          source: curl -X GET 'https://fakestoreapi.com/carts'
        - lang: python
          label: Python
          source: |-
            import requests
            response = requests.get('https://fakestoreapi.com/carts')
            print(response.json())
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Cart'
        '400':
          description: Bad request
    post:
      summary: Add a new cart
      description: Create a new cart.
      operationId: addCart
      tags:
        - Carts
      x-code-samples:
        - lang: javascript
          label: JavaScript (Browser)
          source: |-
            const cart = { userId: 1, products: [{ id: 1 }] };
            fetch('https://fakestoreapi.com/carts', {
              method: 'POST',
              headers: { 'Content-Type': 'application/json' },
              body: JSON.stringify(cart)
            })
              .then(response => response.json())
              .then(data => console.log(data));
        - lang: nodejs
          label: Node.js (Axios)
          source: |-
            const axios = require('axios');
            const cart = { userId: 1, products: [{ id: 1 }] };
            axios.post('https://fakestoreapi.com/carts', cart)
              .then(response => console.log(response.data));
        - lang: php
          label: PHP
          source: |-
            <?php
              $cart = json_encode(['userId' => 1, 'products' => [['id' => 1]]]);
              $ch = curl_init('https://fakestoreapi.com/carts');
              curl_setopt($ch, CURLOPT_POST, 1);
              curl_setopt($ch, CURLOPT_POSTFIELDS, $cart);
              curl_setopt($ch, CURLOPT_HTTPHEADER, ['Content-Type: application/json']);
              $response = curl_exec($ch);
              curl_close($ch);
              echo $response;
            ?>
        - lang: curl
          label: cURL
          source: >-
            curl -X POST 'https://fakestoreapi.com/carts' -H 'Content-Type:
            application/json' -d '{"userId": 1, "products": [{"id": 1}]}'
        - lang: python
          label: Python
          source: >-
            import requests

            cart = {'userId': 1, 'products': [{'id': 1}]}

            response = requests.post('https://fakestoreapi.com/carts',
            json=cart)

            print(response.json())
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Cart'
      responses:
        '201':
          description: Cart created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Cart'
        '400':
          description: Bad request
  /carts/{id}:
    get:
      summary: Get a single cart
      description: Retrieve details of a specific cart by ID.
      operationId: getCartById
      tags:
        - Carts
      x-code-samples:
        - lang: javascript
          label: JavaScript (Browser)
          source: |-
            fetch('https://fakestoreapi.com/carts/1')
              .then(response => response.json())
              .then(data => console.log(data));
        - lang: nodejs
          label: Node.js (Axios)
          source: |-
            const axios = require('axios');
            axios.get('https://fakestoreapi.com/carts/1')
              .then(response => console.log(response.data));
        - lang: php
          label: PHP
          source: |-
            <?php
              $response = file_get_contents('https://fakestoreapi.com/carts/1');
              echo $response;
            ?>
        - lang: curl
          label: cURL
          source: curl -X GET 'https://fakestoreapi.com/carts/1'
        - lang: python
          label: Python
          source: |-
            import requests
            response = requests.get('https://fakestoreapi.com/carts/1')
            print(response.json())
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Cart'
        '400':
          description: Bad request
    put:
      summary: Update a cart
      description: Update an existing cart by ID.
      operationId: updateCart
      tags:
        - Carts
      x-code-samples:
        - lang: javascript
          label: JavaScript (Browser)
          source: |-
            const cart = { userId: 1, products: [{ id: 2 }] };
            fetch('https://fakestoreapi.com/carts/1', {
              method: 'PUT',
              headers: { 'Content-Type': 'application/json' },
              body: JSON.stringify(cart)
            })
              .then(response => response.json())
              .then(data => console.log(data));
        - lang: nodejs
          label: Node.js (Axios)
          source: |-
            const axios = require('axios');
            const cart = { userId: 1, products: [{ id: 2 }] };
            axios.put('https://fakestoreapi.com/carts/1', cart)
              .then(response => console.log(response.data));
        - lang: php
          label: PHP
          source: |-
            <?php
              $cart = json_encode(['userId' => 1, 'products' => [['id' => 2]]]);
              $ch = curl_init('https://fakestoreapi.com/carts/1');
              curl_setopt($ch, CURLOPT_CUSTOMREQUEST, 'PUT');
              curl_setopt($ch, CURLOPT_POSTFIELDS, $cart);
              curl_setopt($ch, CURLOPT_HTTPHEADER, ['Content-Type: application/json']);
              $response = curl_exec($ch);
              curl_close($ch);
              echo $response;
            ?>
        - lang: curl
          label: cURL
          source: >-
            curl -X PUT 'https://fakestoreapi.com/carts/1' -H 'Content-Type:
            application/json' -d '{"userId": 1, "products": [{"id": 2}]}'
        - lang: python
          label: Python
          source: >-
            import requests

            cart = {'userId': 1, 'products': [{'id': 2}]}

            response = requests.put('https://fakestoreapi.com/carts/1',
            json=cart)

            print(response.json())
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Cart'
      responses:
        '200':
          description: Cart updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Cart'
        '400':
          description: Bad request
    delete:
      summary: Delete a cart
      description: Delete a specific cart by ID.
      operationId: deleteCart
      tags:
        - Carts
      x-code-samples:
        - lang: javascript
          label: JavaScript (Browser)
          source: |-
            fetch('https://fakestoreapi.com/carts/1', {
              method: 'DELETE'
            })
              .then(response => response.json())
              .then(data => console.log(data));
        - lang: nodejs
          label: Node.js (Axios)
          source: |-
            const axios = require('axios');
            axios.delete('https://fakestoreapi.com/carts/1')
              .then(response => console.log(response.data));
        - lang: php
          label: PHP
          source: |-
            <?php
              $ch = curl_init('https://fakestoreapi.com/carts/1');
              curl_setopt($ch, CURLOPT_CUSTOMREQUEST, 'DELETE');
              $response = curl_exec($ch);
              curl_close($ch);
              echo $response;
            ?>
        - lang: curl
          label: cURL
          source: curl -X DELETE 'https://fakestoreapi.com/carts/1'
        - lang: python
          label: Python
          source: |-
            import requests
            response = requests.delete('https://fakestoreapi.com/carts/1')
            print(response.json())
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: Cart deleted successfully
        '400':
          description: Bad request
  /users:
    get:
      summary: Get all users
      description: Retrieve a list of all users.
      operationId: getAllUsers
      tags:
        - Users
      x-code-samples:
        - lang: javascript
          label: JavaScript (Browser)
          source: |-
            fetch('https://fakestoreapi.com/users')
              .then(response => response.json())
              .then(data => console.log(data));
        - lang: nodejs
          label: Node.js (Axios)
          source: |-
            const axios = require('axios');
            axios.get('https://fakestoreapi.com/users')
              .then(response => console.log(response.data));
        - lang: php
          label: PHP
          source: |-
            <?php
              $response = file_get_contents('https://fakestoreapi.com/users');
              echo $response;
            ?>
        - lang: curl
          label: cURL
          source: curl -X GET 'https://fakestoreapi.com/users'
        - lang: python
          label: Python
          source: |-
            import requests
            response = requests.get('https://fakestoreapi.com/users')
            print(response.json())
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/User'
        '400':
          description: Bad request
    post:
      summary: Add a new user
      description: Create a new user.
      operationId: addUser
      tags:
        - Users
      x-code-samples:
        - lang: javascript
          label: JavaScript (Browser)
          source: >-
            const user = { username: 'john_doe', email: 'john@example.com',
            password: 'pass123' };

            fetch('https://fakestoreapi.com/users', {
              method: 'POST',
              headers: { 'Content-Type': 'application/json' },
              body: JSON.stringify(user)
            })
              .then(response => response.json())
              .then(data => console.log(data));
        - lang: nodejs
          label: Node.js (Axios)
          source: >-
            const axios = require('axios');

            const user = { username: 'john_doe', email: 'john@example.com',
            password: 'pass123' };

            axios.post('https://fakestoreapi.com/users', user)
              .then(response => console.log(response.data));
        - lang: php
          label: PHP
          source: |-
            <?php
              $user = json_encode(['username' => 'john_doe', 'email' => 'john@example.com', 'password' => 'pass123']);
              $ch = curl_init('https://fakestoreapi.com/users');
              curl_setopt($ch, CURLOPT_POST, 1);
              curl_setopt($ch, CURLOPT_POSTFIELDS, $user);
              curl_setopt($ch, CURLOPT_HTTPHEADER, ['Content-Type: application/json']);
              $response = curl_exec($ch);
              curl_close($ch);
              echo $response;
            ?>
        - lang: curl
          label: cURL
          source: >-
            curl -X POST 'https://fakestoreapi.com/users' -H 'Content-Type:
            application/json' -d '{"username": "john_doe", "email":
            "john@example.com", "password": "pass123"}'
        - lang: python
          label: Python
          source: >-
            import requests

            user = {'username': 'john_doe', 'email': 'john@example.com',
            'password': 'pass123'}

            response = requests.post('https://fakestoreapi.com/users',
            json=user)

            print(response.json())
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
      responses:
        '201':
          description: User created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '400':
          description: Bad request
  /users/{id}:
    get:
      summary: Get a single user
      description: Retrieve details of a specific user by ID.
      operationId: getUserById
      tags:
        - Users
      x-code-samples:
        - lang: javascript
          label: JavaScript (Browser)
          source: |-
            fetch('https://fakestoreapi.com/users/1')
              .then(response => response.json())
              .then(data => console.log(data));
        - lang: nodejs
          label: Node.js (Axios)
          source: |-
            const axios = require('axios');
            axios.get('https://fakestoreapi.com/users/1')
              .then(response => console.log(response.data));
        - lang: php
          label: PHP
          source: |-
            <?php
              $response = file_get_contents('https://fakestoreapi.com/users/1');
              echo $response;
            ?>
        - lang: curl
          label: cURL
          source: curl -X GET 'https://fakestoreapi.com/users/1'
        - lang: python
          label: Python
          source: |-
            import requests
            response = requests.get('https://fakestoreapi.com/users/1')
            print(response.json())
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '400':
          description: Bad request
    put:
      summary: Update a user
      description: Update an existing user by ID.
      operationId: updateUser
      tags:
        - Users
      x-code-samples:
        - lang: javascript
          label: JavaScript (Browser)
          source: >-
            const user = { username: 'john_doe_updated', email:
            'john.updated@example.com' };

            fetch('https://fakestoreapi.com/users/1', {
              method: 'PUT',
              headers: { 'Content-Type': 'application/json' },
              body: JSON.stringify(user)
            })
              .then(response => response.json())
              .then(data => console.log(data));
        - lang: nodejs
          label: Node.js (Axios)
          source: >-
            const axios = require('axios');

            const user = { username: 'john_doe_updated', email:
            'john.updated@example.com' };

            axios.put('https://fakestoreapi.com/users/1', user)
              .then(response => console.log(response.data));
        - lang: php
          label: PHP
          source: |-
            <?php
              $user = json_encode(['username' => 'john_doe_updated', 'email' => 'john.updated@example.com']);
              $ch = curl_init('https://fakestoreapi.com/users/1');
              curl_setopt($ch, CURLOPT_CUSTOMREQUEST, 'PUT');
              curl_setopt($ch, CURLOPT_POSTFIELDS, $user);
              curl_setopt($ch, CURLOPT_HTTPHEADER, ['Content-Type: application/json']);
              $response = curl_exec($ch);
              curl_close($ch);
              echo $response;
            ?>
        - lang: curl
          label: cURL
          source: >-
            curl -X PUT 'https://fakestoreapi.com/users/1' -H 'Content-Type:
            application/json' -d '{"username": "john_doe_updated", "email":
            "john.updated@example.com"}'
        - lang: python
          label: Python
          source: >-
            import requests

            user = {'username': 'john_doe_updated', 'email':
            'john.updated@example.com'}

            response = requests.put('https://fakestoreapi.com/users/1',
            json=user)

            print(response.json())
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
      responses:
        '200':
          description: User updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '400':
          description: Bad request
    delete:
      summary: Delete a user
      description: Delete a specific user by ID.
      operationId: deleteUser
      tags:
        - Users
      x-code-samples:
        - lang: javascript
          label: JavaScript (Browser)
          source: |-
            fetch('https://fakestoreapi.com/users/1', {
              method: 'DELETE'
            })
              .then(response => response.json())
              .then(data => console.log(data));
        - lang: nodejs
          label: Node.js (Axios)
          source: |-
            const axios = require('axios');
            axios.delete('https://fakestoreapi.com/users/1')
              .then(response => console.log(response.data));
        - lang: php
          label: PHP
          source: |-
            <?php
              $ch = curl_init('https://fakestoreapi.com/users/1');
              curl_setopt($ch, CURLOPT_CUSTOMREQUEST, 'DELETE');
              $response = curl_exec($ch);
              curl_close($ch);
              echo $response;
            ?>
        - lang: curl
          label: cURL
          source: curl -X DELETE 'https://fakestoreapi.com/users/1'
        - lang: python
          label: Python
          source: |-
            import requests
            response = requests.delete('https://fakestoreapi.com/users/1')
            print(response.json())
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: User deleted successfully
        '400':
          description: Bad request
  /auth/login:
    post:
      summary: Login
      description: Authenticate a user.
      operationId: loginUser
      tags:
        - Auth
      x-code-samples:
        - lang: javascript
          label: JavaScript (Browser)
          source: |-
            const credentials = { username: 'john_doe', password: 'pass123' };
            fetch('https://fakestoreapi.com/auth/login', {
              method: 'POST',
              headers: { 'Content-Type': 'application/json' },
              body: JSON.stringify(credentials)
            })
              .then(response => response.json())
              .then(data => console.log(data));
        - lang: nodejs
          label: Node.js (Axios)
          source: |-
            const axios = require('axios');
            const credentials = { username: 'john_doe', password: 'pass123' };
            axios.post('https://fakestoreapi.com/auth/login', credentials)
              .then(response => console.log(response.data));
        - lang: php
          label: PHP
          source: |-
            <?php
              $credentials = json_encode(['username' => 'john_doe', 'password' => 'pass123']);
              $ch = curl_init('https://fakestoreapi.com/auth/login');
              curl_setopt($ch, CURLOPT_POST, 1);
              curl_setopt($ch, CURLOPT_POSTFIELDS, $credentials);
              curl_setopt($ch, CURLOPT_HTTPHEADER, ['Content-Type: application/json']);
              $response = curl_exec($ch);
              curl_close($ch);
              echo $response;
            ?>
        - lang: curl
          label: cURL
          source: >-
            curl -X POST 'https://fakestoreapi.com/auth/login' -H 'Content-Type:
            application/json' -d '{"username": "john_doe", "password":
            "pass123"}'
        - lang: python
          label: Python
          source: >-
            import requests

            credentials = {'username': 'john_doe', 'password': 'pass123'}

            response = requests.post('https://fakestoreapi.com/auth/login',
            json=credentials)

            print(response.json())
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Login'
      responses:
        '200':
          description: Login successful
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LoginResponse'
        '400':
          description: Bad request
components:
  schemas:
    Product:
      type: object
      properties:
        id:
          type: integer
        title:
          type: string
        price:
          type: number
          format: float
        description:
          type: string
        category:
          type: string
        image:
          type: string
          format: uri
    Cart:
      type: object
      properties:
        id:
          type: integer
        userId:
          type: integer
        products:
          type: array
          items:
            $ref: '#/components/schemas/Product'
    User:
      type: object
      properties:
        id:
          type: integer
        username:
          type: string
        email:
          type: string
        password:
          type: string
    Login:
      type: object
      properties:
        username:
          type: string
        password:
          type: string
    LoginResponse:
      type: object
      properties:
        token:
          type: string
